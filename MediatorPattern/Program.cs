using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MediatorPattern
{
    /*
     
    三、中介者模式的实现要点：
    
        将多个对象间复杂的关联关系解耦，Mediator模式将多个对象间的控制逻辑进行集中管理，变“多个对象互相关联”为“多个对象和一个中介者关联”，简化了系统的维护，抵御了可能的变化。
            随着控制逻辑的复杂化，Mediator具体对象的实现可能相当复杂。这时候可以对Mediator对象进行分解处理。
　　    Facade模式是解耦系统外到系统内（单向）的对相关联关系
　　    Mediator模式是解耦系统内各个对象之间（双向）的关联关系

        3.1】、中介者模式的优点
              （1）、松散耦合
                       中介者模式通过把多个同事对象之间的交互封装到中介对象里面，从而使得对象之间松散耦合，基本上可以做到互不依赖。这
                       样一来，同时对象就可以独立的变化和复用，不再“牵一发动全身”
              （2）、集中控制交互
                       多个同事对象的交互，被封装在中介者对象里面集中管理，使得这些交互行为发生变化的时候，只需要修改中介者就可以了。
              （3）、多对多变为一对多 
                       没有中介者模式的时候，同事对象之间的关系通常是多对多，引入中介者对象后，中介者和同事对象的关系通常变为双向的一对多，这会让对象的关系更容易理解和实现。

         3.2】、中介者模式的缺点
              （1）、过多集中化
                     如果同事对象之间的交互非常多，而且比较复杂，当这些复杂性全都集中到中介者的时候，会导致中介者对象变的十分复杂，而且难于维护和管理。

    四、.NET 中介者模式的实现
         根据我个人的理解，微软的ASP.NET MVC开发模式就是一个中介者模式的很好的实现，其中C就是Controller，也就是中文所说的控制器，控制器就是一个中介者，M和V和它打交道，
         具体的情况大家可以去查看相关资料，这方面的资料还是很多的。
     
     */
}
